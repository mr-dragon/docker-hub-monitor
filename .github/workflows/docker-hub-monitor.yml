name: Monitor Docker Hub Image Updates

on:
  push:
    # 仅在 imagex.txt 文件更新时触发
    paths:
      - "imagex.txt"
  workflow_dispatch: # 手动触发


jobs:
  monitor-docker-images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install Dependencies
      run: pip install requests docker

    - name: Monitor Docker Images
      env:
        IMAGE_LIST_FILE: "imagex.txt" # 镜像列表文件
        LAST_UPDATE_FILE_DIR: ".last_updates" # 存储镜像更新时间
        WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }} # 企业微信或其他 Webhook
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME || '' }} # Docker Hub 用户名（可选）
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD || '' }} # Docker Hub 密码（可选）
      run: |
        python <<EOF
        import os
        import requests
        import json
        import subprocess

        def get_last_updated(image, platform=None):
            """
            获取镜像的更新时间
            """
            try:
                cmd = ["docker", "manifest", "inspect", image]
                if platform:
                    cmd.extend(["--platform", platform])
                result = subprocess.run(cmd, capture_output=True, text=True)
                manifest = json.loads(result.stdout)
                return manifest["manifests"][0]["platform"]["lastUpdated"]
            except Exception as e:
                print(f"Failed to fetch manifest for {image}: {e}")
                return None

        # 读取镜像列表文件
        image_list_file = os.getenv("IMAGE_LIST_FILE")
        last_update_file_dir = os.getenv("LAST_UPDATE_FILE_DIR")
        webhook_url = os.getenv("WEBHOOK_URL")

        if not os.path.exists(image_list_file):
            raise FileNotFoundError(f"Image list file {image_list_file} not found.")
        with open(image_list_file, "r") as f:
            images = [line.strip() for line in f if line.strip() and not line.startswith("#")]

        # 确保存储镜像更新时间的目录存在
        if not os.path.exists(last_update_file_dir):
            os.makedirs(last_update_file_dir)

        # Docker 登录（如果有私库镜像）
        docker_username = os.getenv("DOCKER_USERNAME")
        docker_password = os.getenv("DOCKER_PASSWORD")
        if docker_username and docker_password:
            try:
                subprocess.run(
                    ["docker", "login", "-u", docker_username, "-p", docker_password],
                    check=True,
                    capture_output=True,
                    text=True
                )
                print("Docker login successful.")
            except subprocess.CalledProcessError as e:
                print(f"Docker login failed: {e.stderr}")

        # 遍历镜像列表
        for line in images:
            if line.startswith("--platform"):
                parts = line.split(" ")
                platform = parts[1]
                image = parts[2]
            else:
                platform = None
                image = line

            last_update_file = os.path.join(last_update_file_dir, image.replace("/", "_").replace(":", "_") + ".txt")

            # 获取镜像更新时间
            last_updated = get_last_updated(image, platform)
            if not last_updated:
                print(f"Failed to fetch update info for {image}. Skipping.")
                continue

            # 检查是否有更新
            if os.path.exists(last_update_file):
                with open(last_update_file, "r") as f:
                    last_checked = f.read().strip()
            else:
                last_checked = None

            if last_checked != last_updated:
                with open(last_update_file, "w") as f:
                    f.write(last_updated)

                # 发送通知
                if webhook_url:
                    payload = {
                        "msgtype": "text",
                        "text": {
                            "content": f"Docker image {image} has been updated to {last_updated}."
                        }
                    }
                    headers = {"Content-Type": "application/json"}
                    resp = requests.post(webhook_url, data=json.dumps(payload), headers=headers)
                    if resp.status_code != 200:
                        print(f"Failed to send webhook for {image}: {resp.status_code} {resp.text}")
                print(f"Update detected for {image}: {last_updated}")
            else:
                print(f"No updates for {image}.")
        EOF
